#!/usr/bin/env ruby
require 'colorize'

class File
  def self.git_repo?(dir)
    directory?(dir) && exists?(join(dir, '.git'))
  end
end

class FormattedBranchPrinter
  # scan a list of titles, then print them with first column left-justified to
  # that size
  attr_accessor :longest

  def initialize
    @longest = 0
  end

  def scan(title)
    self.longest = [longest, title.size].max
  end

  def print(title, branch)
    puts "%s%s%s" % [title, '.' * title_columns(title), branch]
  end

  def print_separator
    puts '-' * (3 + longest + 20)
  end

  private

  def title_columns(title)
    3 + longest - title.size
  end
end

table = FormattedBranchPrinter.new
table.scan "PROJECT"

Dir.glob(File.expand_path(File.join(File.dirname(__FILE__), '../*'))).each do |dir|
  next unless File.git_repo? dir
  name = dir.split("/").last
  table.scan name
end
table.print "PROJECT", "BRANCH"
table.print_separator

Dir.glob(File.expand_path(File.join(File.dirname(__FILE__), '../*'))).each do |dir|
  next unless File.git_repo? dir
  name = dir.split("/").last
  cmd = %Q[(cd #{dir} && (git branch | grep \\* | awk '{ print $2 }' ) || echo 'Not a git repo')]
  branch = `#{cmd}`.strip


  color = case branch
          when 'Not a git repo' then :light_black
          when 'master' then :green
          else
            :yellow
          end

  cmd = %Q|(cd #{dir} && git rev-parse --short --quiet HEAD)|
  sha = '(' + `#{cmd}`.strip + ')'

  branch = sha + ' ' + branch

  branch = branch.send color
  table.print name, branch
end
